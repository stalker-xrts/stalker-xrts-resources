#include "common.h"
#include "lmodel.h"
#include "shadow.h"

#define SUN_FARPLANE 100.f

#ifdef USE_SUNFILTER
#ifdef MSAA_OPTIMIZATION
float4 main( v2p_TL2uv I, uint iSample : SV_SAMPLEINDEX  ) : SV_Target
#else
float4 main( v2p_TL2uv I  ) : SV_Target
#endif
{
//  float4 	_P	= tex2D 	(s_position, 	tc);

	gbuffer_data gbd = gbuffer_load_data( GLD_P(I.Tex0, I.HPos, ISAMPLE) );

#ifdef	GBUFFER_OPTIMIZATION
	//	Emulate virtual offset
	gbd.P += gbd.N*0.015f;
#endif	//	GBUFFER_OPTIMIZATION

	float4 	_P	= float4(gbd.P,1.f);
	float4 	PS	= mul( m_shadow, _P);
#ifdef 	USE_HWSMAP
	float 	s 	= sunmask( _P )*sample_hw( PS, float4(0,0,0,0) );
#else
	float 	s 	= sunmask( _P )*sample_sw( PS.xy / PS.w, float2(0,0), PS.z );
#endif
	return 	s	;
}
#else
#ifdef MSAA_OPTIMIZATION
float4 main ( v2p_TL2uv I, uint iSample : SV_SAMPLEINDEX ) : SV_Target
#else
float4 main ( v2p_TL2uv I ) : SV_Target
#endif
{
//  float4 _P		= tex2D 	(s_position, 	tc);
//  float4  _N		= tex2D 	(s_normal,   	tc);

	gbuffer_data gbd = gbuffer_load_data( GLD_P(I.Tex0, I.HPos, ISAMPLE) );

#ifdef	GBUFFER_OPTIMIZATION
	//	Emulate virtual offset
	gbd.P += gbd.N*0.015f;
#endif	//	GBUFFER_OPTIMIZATION

	float4 	_P	= float4(gbd.P,gbd.mtl);
	float4	_N	= float4(gbd.N,gbd.hemi);

	// ----- light-model
	float 	m	= xmaterial	;
# ifndef USE_R2_STATIC_SUN
			m 	= _P.w		;
# endif
	float4	light 	= plight_infinity( m, _P, _N, Ldynamic_dir );

	// ----- shadow
  	float4 	P4 	= float4( _P.x, _P.y, _P.z, 1 );
	float4 	PS	= mul( m_shadow, P4 );

#ifndef	SUN_QUALITY
	float 	s 	= sunmask( P4 )*sample_hw_pcf( PS, float4(0,0,0,0) );
#else	//	SUN_QUALITY
	float 	s 	= sunmask(P4);
	#if SUN_QUALITY==1
		s 	*= shadow		(PS);
	#elif SUN_QUALITY>=2
		s 	*= shadowtest_sun 	(PS,I.Tex1);
	#endif
#endif	//	SUN_QUALITY

#ifdef 	SUN_FARPLANE
	float f		= saturate( _P.z / SUN_FARPLANE );
	s			= lerp( s, 0.333h, f*f );
#endif

	return 		blend( Ldynamic_color * light * s, I.Tex0 );
}
#endif
