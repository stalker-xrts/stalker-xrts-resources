#include "common.h"
#include "lmodel.h"

#ifdef USE_MINMAX_SM
#define SM_MINMAX
#endif

#if SUN_QUALITY>2
#define ULTRA_SHADOWS_ON
#endif //	SUN_QUALITY>2

#ifdef ULTRA_SHADOWS_ON
#define USE_ULTRA_SHADOWS
#endif

#include "shadow.h"

#ifdef USE_SUNFILTER
#ifdef MSAA_OPTIMIZATION
float4 main ( v2p_TL2uv I, uint iSample : SV_SAMPLEINDEX  ) : SV_Target
#else
float4 main ( v2p_TL2uv I  ) : SV_Target
#endif
{
	//float4 _P = tex2D( s_position, tc );

	gbuffer_data gbd = gbuffer_load_data( GLD_P(I.Tex0, I.HPos, ISAMPLE) );

#ifdef	GBUFFER_OPTIMIZATION
	//	Emulate virtual offset
	gbd.P += gbd.N*0.015f;
#endif	//	GBUFFER_OPTIMIZATION

	float4 _P = float4( gbd.P, 1.f);

	float4 PS = mul( m_shadow,  _P );

	float s	= shadowtest_sun( PS, I.Tex1 ) * sunmask( _P );

	return s;
}
#else
#ifdef MSAA_OPTIMIZATION
float4 main ( v2p_TL2uv I,  uint iSample : SV_SAMPLEINDEX ) : SV_Target
#else
float4 main ( v2p_TL2uv I ) : SV_Target
#endif
{
	//float4 	_P	= tex2D( s_position, tc );
	//float4	_N	= tex2D( s_normal, tc );

	gbuffer_data gbd = gbuffer_load_data( GLD_P(I.Tex0, I.HPos, ISAMPLE) );

#ifdef	GBUFFER_OPTIMIZATION
	//	Emulate virtual offset
	gbd.P += gbd.N*0.015f;
#endif	//	GBUFFER_OPTIMIZATION

	float4 _P = float4( gbd.P, gbd.mtl );
	float4  _N = float4( gbd.N, gbd.hemi );

	// ----- light-model
	float	m	= xmaterial;
# ifndef USE_R2_STATIC_SUN
			m 	= _P.w;
# endif
	float4	light	= plight_infinity ( m, _P, _N, Ldynamic_dir );

	// ----- shadow
  	float4 	P4 	= float4( _P.x, _P.y, _P.z, 1.f);
	float4 	PS	= mul( m_shadow, P4 );
	float 	s 	= sunmask( P4 );
	#ifdef 	USE_SJITTER
	  		s 	*= shadowtest_sun( PS, I.Tex1 );
	#else
#ifdef SM_MINMAX
	  		s 	*= shadow_dx10_1( PS, I.Tex1, I.HPos.xy );
#else
			s *= shadow( PS );
#endif
	#endif

	return 		blend( Ldynamic_color * light * s, I.Tex0 );
}
#endif